module dataroad(clk,RegWr,Branch,Jump,ExtOp,AluSrc,Aluctr,MemWr,MemtoReg,RegDst,instruction
,busA,busB,AluB,AluF,busW,Datain,Dataout);
// 数据通路 = 取指 + 寄存器 + ALU + 数据存储器
// 输入：时钟，寄存器写使能，分支，跳转，扩展操作，ALU控制，存储器写使能，存储器到寄存器，寄存器目的
// 输出：指令，总线A，总线B，ALU总线，ALU结果，总线写使能，数据输入，数据输出
parameter n=32;
input clk,RegWr,Branch,Jump,ExtOp,AluSrc,MemWr,MemtoReg,RegDst;
input[2:0] Aluctr;
output [n-1:0] instruction;
output [n-1:0] busA,busB,AluB,AluF,busW,Datain,Dataout;

wire[5:0] op,func;
wire[4:0] Rs,Rt,Rd;
wire[15:0] imm16;
wire[4:0] Rw,Ra,Rb;
wire[n-1:0] imm32;
wire  Zero,Overflow,Ve;

//取指令部件
fetchins fetch(.Clk(clk),.Zero(Zero),.Branch(Branch),.Jump(Jump),.inst(instruction));
assign op=instruction[31:26];
assign Rs=instruction[25:21];
assign Rt=instruction[20:16];
assign Rd=instruction[15:11];
assign func=instruction[5:0];
assign imm16=instruction[15:0];

//寄存器部件
MUX2to1 mux6(Rt,Rd,RegDst,Rw);//选择寄存器写入
assign Ra=Rs;
assign Rb=Rt;
assign Ve=RegWr & ~Overflow;//不溢出且可以写入
Reg regs(.Clk(clk),.busW(busW),.RegWr(Ve),.Rw(Rw),.Ra(Ra),.Rb(Rb),.busA(busA),.busB(busB));

//ALU部件
assign imm32={{16{imm16[15]&ExtOp}},imm16[15:0]};//imm16扩展
MUX2to1 mux7(busB,imm32,AluSrc,AluB);//0 busB 1 imm16扩展
alu alu1(.A(busA),.B(AluB),.ALUctr(Aluctr),.Zero(Zero),.Overflow(Overflow),.Result(AluF));

//数据存储器部件
assign Datain=busB;
DataMemory datamem(.DataIn(Datain),.Clk(clk),.WrEn(MemWr),.Adr(AluF),.DataOut(Dataout));
MUX2to1 mux8(AluF,Dataout,MemtoReg,busW);//地址或者存储器里的内容

endmodule